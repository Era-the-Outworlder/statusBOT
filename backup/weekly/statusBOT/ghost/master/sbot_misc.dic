
// ::::    ::::  :::::::::::  ::::::::   ::::::::  
// +:+:+: :+:+:+     :+:     :+:    :+: :+:    :+: 
// +:+ +:+:+ +:+     +:+     +:+        +:+        
// +#+  +:+  +#+     +#+     +#++:++#++ +#+        
// +#+       +#+     +#+            +#+ +#+        
// #+#       #+#     #+#     #+#    #+# #+#    #+# 
// ###       ### ###########  ########   ########  

// -------- Miscellaneous Functions --------

// ---- Username ----
// I'm not sure if this function is necessary at all, but I haven't tossed it yet.
On_username
{
	username
}


// ---- OnKeyPress ----
// This defines the hotkeys your ghost will use.
 
OnKeyPress
{
	if reference0 == "t"
	{
		OnAiTalk
	}
	elseif reference0 == "l"
	{
		OnLastAITalk
	}
	elseif reference0 == "r"
	{
		OnLastTalk
	}
	elseif reference0 == "f4"
	{
		OnClose
	}
	elseif reference0 == "f1"
	{
		"\![open,readme]"
	}
	elseif reference0 == "o"
	{
	}
}

OnLastTalk 
{
	SHIORI3FW.LastTalk
}

OnLastAITalk
{
	SHIORI3FW.LastAITalk
}

// -------- Things specifically added by Era --------

// As the name implies, this checks if the balloon is currently open or not. 
// This was written by Levidre, and modified a bit by Zi.

balloonCheck
{
    if ASEARCH("Status",var.req.key) != -1
    {
        _currentstatus = var.req.value[ASEARCH("Status",var.req.key)]
        if "balloon" _in_ _currentstatus; 1
        else; 0
    }
    else; 0
}

// Modified from above
talkCheck
{
    if ASEARCH("Status",var.req.key) != -1
    {
        _currentstatus = var.req.value[ASEARCH("Status",var.req.key)]
        if "talking" _in_ _currentstatus || "choosing" _in_ _currentstatus; 1
        else; 0
    }
    else; 0
}

//----- SANITISE -----
// Strips out punctuation that would interrupt any of the functions

SANITISE
{
	_clean = REPLACE(_argv[0],"'",CHR(39)) //Converts apostrophes/single quotes
	_clean = REPLACE(_clean,'"',CHR(34)) //Converts double quotes
	_clean = REPLACE(_clean,",",CHR(44)) //Converts commas
	
	"%(_clean)"
}







//---- Get other active ghost names ----
On_otherghostname
{
	// Create a list of currently active ghosts
	ghostexlist = ""
	_i = 0
	while _i >= 0 
	{
		_ghostname = NAMETOVALUE("reference%_i")
		if _ghostname != "" 
		{
			if _i > 0; ghostexlist += ","
			ghostexlist += _ghostname[0]
			_i++
		}
		else; _i = -1
	}
	ghostexcount = ARRAYSIZE(ghostexlist)
}





// ---- Owned SSTP made with uniqueid ----
On_uniqueid
{
	uniqueid = reference0
}

// ----hwnd Get ----
On_hwnd
{
	sakurahwnd    = reference0[0]
	kerohwnd      = reference0[1]
	sakurablnhwnd = reference1[0]
	keroblnhwnd   = reference1[1]
}




// -------- System Information with CPUID --------

// ---- Getting Baseware information ----

OnRunCPUID
{
		// OS related
	_platform = FUNCTIONEX("saori_cpuid.dll","platform")
	_os_name = FUNCTIONEX("saori_cpuid.dll","os.name")
	_os_version = FUNCTIONEX("saori_cpuid.dll","os.version")
	_os_version_int = TOINT(_os_version)
	_os_build = FUNCTIONEX("saori_cpuid.dll","os.build")
	
		//CPU related
	_cpu_name = FUNCTIONEX("saori_cpuid.dll","cpu.name")
	_cpu_clockex = FUNCTIONEX("saori_cpuid.dll","cpu.clockex")//(MHz)
	
	
	"\0\b[2]\_q\![set,autoscroll,disable]"
	--
	// "\f[color,#FFFF00]OS:\f[default] %(_os_name) v.%(_os_version_int) \n\f[color,#FFFF00]Build #:\f[default]%(_os_build) \n[150]"
	--
	"\f[color,#FFFF00]CPU:\f[default] %(_cpu_name) \n\f[color,#FFFF00]Clock Rate:\f[default] %(_cpu_clockex)MHz\n[150]"
	--
	_memTP = TOREAL(memorytotalphys)
	_memTPKB = _memTP/1024
	_memTPMB = _memTPKB/1024
	_memTPGB = _memTPMB/1024
	_memTPGB = TOSTR(_memTPGB)
	_totalPhysMemGB = SUBSTR(_memTPGB,0,4)
	
	_memAP = TOREAL(memoryavailphys)
	_memAPKB = _memAP/1024
	_memAPMB = _memAPKB/1024
	_memAPGB = _memAPMB/1024
	_memAPGB = TOSTR(_memAPGB)
	_availablePhysMemGB = SUBSTR(_memAPGB,0,4)

	"\f[color,#FFFF00]Memory Load:\f[default] %(memoryload)% \n\f[color,#FFFF00]Total PhysMemory:\f[default] \n%(memorytotalphys) Bytes \n%(_totalPhysMemGB) GiB \n\f[color,#FFFF00]Available PhysMemory:\f[default] \n%(memoryavailphys) Bytes \n%(_availablePhysMemGB) GiB\n[150]"
	--
	"\f[color,#FFFF00]Ukagaka:\f[default] \n%(basewarename): %(bwVersionEX)"
	--
	if devDebug == "ON"
	{"\n%property[baseware.version]"}
	--
	"\x\e"
}

// -------- Recycling Bin --------

OnRecycleStart
{
	
	_binNum = FUNCTIONEX("gomi.dll", "-n")
	_binSizeB = TOINT(valueex[0])
	_binSizeK = (_binSizeB / 1024); _binSizeM = (_binSizeK / 1024); _binSizeG = (_binSizeM / 1024)
	_type = ""
	_binDisplay = 0
	if _binSizeG >= 5 {_binDisplay = _binSizeG; _type = "GB"}
	elseif _binSizeM >= 100 {_binDisplay = _binSizeM; _type = "MB"}
	elseif _binSizeK >= 100 {_binDisplay = _binSizeK; _type = "KB"}
	else{_binDisplay = _binSizeB; _type = "bytes"}
	--
	if _binNum == 0 //If the recycle bin is empty.
	{
		"The recycling bin is already empty.\e"
	}
	elseif _binNum == 1 //If the recycle bin has 1 item
	{
		"%(sbot)There is %(_binNum) item, using %(_binDisplay)%(_type) of space. \_w[1000]\n/
		 \f[align,center]Proceed?\n	\![*] \f[align,left]\q[Yes,RecycleEmpty]\n \n[-100]\f[align,center]--------\n \n[-100]\f[align,right] \![*] \q[No,RecycleCancel]\n[150]\f[align,left]"
	}
	elseif _binNum >= 2 //If the recycle bin has anything in it.
	{
		"\0%(sbot)There are %(_binNum) items, using %(_binDisplay)%(_type) of space. \_w[1000]\n/
		 Proceed?\n/
		\![*] \q[Yes,RecycleEmpty] \n \n[-100]\f[align,center]----\n \n[-100]\f[align,right] \![*] \q[No,RecycleCancel]\n[150]\f[align,left]"
	}
}
	

Select.RecycleEmpty
{
	"%(sbot)Emptying Bin... \_w[1000]\_w[1000]\![raise,OnRecycleBinEmptied]"	
}

Select.RecycleCancel
{	
	"%(sbot)Ok. I will just leave it alone then.\e"
}

OnRecycleBinEmptied
{	
	if verBalete == "OFF"
	{
		_gomi = FUNCTIONEX("gomi.dll", "-fq")
	}
	else
	{
		_gomi = FUNCTIONEX("gomi.dll", "-ev")
	}
	--
	"\_w[1500]\n\nDone."
}



//---- Other Functions----

//--OnFileDrop2

//OnFileDrop2 handles how your ghost will set an image as the desktop background when someone drags and drops an image on them.

OnFileDrop2
{
	_filepath = SPLITPATH(reference0)
	_filename = _filepath[2]
	_fileext = TOLOWER(_filepath[3])
	case _fileext
	{
		when ".jpg", ".jpeg", ".bmp", ".png" //These are the formats your ghost will recognize as image files to set as the background.
		{
			Wallpaperfile = reference0
			
			" FILE %(_filename)%(_fileext). Wallpaper?\n[150]/
			\q[Centered,SetWallpaper_0]\n/
			\q[Tiled,SetWallpaper_1]\n/
			\q[Stretched,SetWallpaper_2]\n[150]/
			\q[No thanks,SetWallpaper_Cancel]\e"
		}
		when ".mid", ".wav", ".mp3", ".wma", ".au", ".ogg" //Audio file formats
		{
			"%(_filename)%(_fileext) is music.\e"
		}
		others //Any other file format. 
		{
			" %(_filename)%(_fileext).\e"
		}
	}
}

//This set of options sets the wallpaper up.

Select.SetWallpaper_0
{
	"\![set,wallpaper,%(Wallpaperfile),center] Centered.\e"
}
Select.SetWallpaper_1
{
	"\![set,wallpaper,%(Wallpaperfile),tile] Tiled.\e"
}
Select.SetWallpaper_2
{
	"\![set,wallpaper,%(Wallpaperfile),stretch] Stretched.\e"
}
Select.SetWallpaper_Cancel
{
	"Operation Cancelled.\e"
}


 //---- OnInstallBegin ----
 //OnInstallBegin is called when a file with an included install.txt is dropped on your ghost. 
 
OnInstallBegin
 {
	"Contains an install.txt file. Installing.\e"
 }

 //---- OnInstallComplete ----
 //OnInstallComplete runs once the file above has finished installing.
 
OnInstallComplete
{
	"\0"
 	--
	if reference0 == "shell" //This is checking to see if what you installed is classified as a shell in the install.txt.
 	{	
		if reference1 == "hypothetical" //This is the name of the shell defined in descript.txt in the shell folder.
		{
		"A hypothetical shell.\e"
		//Replace if needed.
		}
		else //For any other shell they may install.
		{
		"New Shell: %(reference1).\e"
		//%(reference1) here would be the name of the shell they installed. Replace if needed.
		}
 	}
	elseif reference0 == "ghost" //if the type of the file they're installing is a ghost.
 	{
		"New Ghost.\_w[500] Installed %(reference1).\e"
		//Reference1 here would be the name of the ghost. Replace as needed.
 	}
	elseif reference0 == "balloon" //if the type of file is a balloon
 	{
		"New Balloon.\_w[500] Name: %(reference1).\e"
		//Reference1 here would be the name of the balloon. Replace as needed.
 	}
	elseif reference0 == "plugin" //if the type of file is a plug-in, like a saori of some kind.
 	{
		"Installed plug-in %(reference1).\e"
		//Reference1 here would be the name of the plug-in. Replace as needed.
 	}
}

//---- OnInstallFailure ----
//If the file you dropped fails to install for one reason or another.

OnInstallFailure
{
	"%(sbot)Failed. Unable to install. \n[150]"
	
	--
	if reference0 == "unsupported" //This checks if the reason it failed is because it was unsupported.
	{
	"File Unsupported.\_w[500]"
	}	
	elseif reference0 == "extraction" //This checks if the file didn't extract properly.
	{
	"\s[0]Unable to extract.\_w[500]"
	//See above but for a failed extraction.
	}
}
 
 //--OnInstallRefuse
 //If the file you dropped can't be installed with this ghost.
 
OnInstallRefuse
 {
	"%(sbot)I cannot install this, but maybe %(reference0) can.\_w[500]"
	
	//reference0 in this function refers to the ghost this file is associated with, probably the name of the ghost listed in its install.txt file. You would see this if you dropped a shell made for a different ghost on your current ghost, for example.
 }


//**** Uninstallation ******************************************
//You may have noticed in the configuration menus in menu.dic an option to turn Uninstall on or off, as well as a greyed out option to uninstall in the right click menu.

//--OnVanishSelecting
//When you select the uninstall option in the menu.

OnVanishSelecting
{
	"...\_w[500]"
}

//OnVanishSelected
//When you decide to uninstall them. 

OnVanishSelected
{
	"...!\_w[500]"
}


//--OnVanishCancel
//If you select Uninstall from the menu, but decide not to do it.

OnVanishCancel
{
	"...?\_w[500]"
}

//--OnVanishButtonHold
//This should trigger if you double click the ghost's balloon in the middle of OnVanishSelected above. So it basically cancels their uninstallation. I'd be pretty careful about testing this, and I'd probably just put the line of dialogue into their script input and test it that way instead.

OnVanishButtonHold
{
	"..."
}


 //---- OnVanished -----------------------------------------
 //OnVanished is a weird little function. Basically, if you uninstall a ghost, it'll automatically go back to the last ghost you were using. They'll then say this line of dialogue about the ghost you just uninstalled. Make sure to set up both their poses immediately so they both appear when it switches back to them.
 
OnVanished
{
	"\0\s[0] What a shame...\_w[1000]\_w[1000]\e"
	
	//reference0 here is the name of the other ghost.
}

OnOtherGhostVanished
{
	"%(reference0) Has been uninstalled.\_w[500]"
}


// I have not gotten this working yet.
OnConfigurationDialogHelp
{
	case reference0
	{
		when "setup"
		{
			"I see you have the settings menu open."
		}
	}

}
// Occurs when clicking an item with the help button in the settings dialog.

// Reference0
// Dialog ID. The correspondence between types and pages is as follows.

// setup ... general
// ghost …… Ghost (1)
// ghost2 …… Ghost (2)
// folder …… Folder
// display …… means
// talk …… Speaking / Balloon
// network …… Connection (1)
// network2 …… Connection (2)
// biff …… POP
// application …… External application
// messenger …… IM
// ipmessenger …… IPMessenger
// international …… Internationalization
// developer …… Development / Others

// Reference1
// Dialog title.

// Reference2
// Item type: Item name.

// Reference3
// Item content text.



//**** Mail Checking *****************
//The next set of functions have to do with checking your email.


 //---- OnBIFFBegin --------
 //When you first tell the ghost to check your email.
 
OnBIFFBegin
 {
	"\0%(sbot)I'll check your email now.\_w[500]\e"
 }

 
 //---- OnBIFFComplete --------
 //After they've succeeded in checking your mail, they'll report back with how many new emails you have.
 
OnBIFFComplete
{
	if reference0 == 0 //If you have no new mail.
 	{
 		"\0%(sbot)There are no new emails.\_w[500]\e"
	}
	elseif reference0 == 1 //If you have one new email.
 	{
 		"\0%(sbot)There is one(1) new email\_w[500]\e"
	}
	elseif reference0 > 1 && reference0 < 11 //If you have more than one email but less than eleven.
	{
		"\0%(sbot)There are %(reference0) new emails.\e"
		//reference0 here stores the amount of new email it finds.
	}
	elseif reference0 > 100 //If there are over one hundred new emails.
	{
		"\0%(sbot)There are %(reference0) new emails. That is quite a lot.\_w[500]\e"
	}
 	else //For any other number of emails.
	{
		"\0%(sbot)There are %(reference0) new emails... \_w[500]\e"
 	}
}

 //---- OnBIFFFailure --------
 //Various error messages that can happen when your ghost tries to connect to an email account.
 
OnBIFFFailure
 {
	if reference0 == "timeout" //If the connection times out.
 	{
		"\0%(sbot)Connection timed out.\_w[500]\e"
	}
 	elseif reference0 == "kick" //If the account blocks the ghost from accessing it. I think gmail may do this at first to try and protect your account from unapproved applications using it. It gives you the option to change the setting in the warning email they send you about it.
	{
		"\0%(sbot)Access denied. Check email settings. \_w[500]\e"
 	}
	elseif reference0 == "defect" //If the information put into the POP menu is wrong.
 	{
		"\0%(sbot)Login failed. Please check POP settings. \_w[500]\![open,configurationdialog]\e"
		
		//Note that this ends with \![open,configurationdialog]. This will open up the preferences menu I described above automatically. More on \! functions in the walkthrough. You can delete the \! tag here if you want to.
	}
 	else //if there's some other kind of error.
	{
		"\0%(sbot)Connection failed. ERROR: %(reference[0])\_w[500]\e"
		
		//reference0 here stores the error message the email server would have given the ghost, hopefully.
 	}
}


 //**** Network Update ***************
 //The following functions are for the Network Update of your ghost, where it will connect to your website, check for new files, and update itself.
 
 //You can easily test these messages using the Developer panel. Go to Open at the bottom of it and choose one of the four Update Event options to simulate a Ghost's update process.
 
 //---- OnUpdateBegin ------
 //When you first tell your ghost to update. Note that they end with \_w[500] to give a little breather time.
 
OnUpdateBegin
 {
	"%(sbot)You would like me to check for updates? I can do that.\_w[500]\e"
 }

 //---- OnUpdateReady ----
 //If the ghost finds new files to update with.
 
OnUpdateReady
{
 
	reference0++ //makes sure it starts at 1 instead of 0
	if reference0 == 1
	{
		"%(sbot)I have one(1) file available for update. \_w[500]"
	
	}
	else
	{
		"There are %(reference0) files available for me to update. \_w[500]"
	
	}
    --
	"\c\0\n\n\nStarting Download"
}





 //---- OnUpdate.OnDownloadBegin ------------------------------------------------
 //This dialogue sets up the cool progress bar. I think it's real neat and since I plan on using this trimmed down version I'm keeping it in here.
 
 //reference0 - file being downloaded
 //reference1 - number of file being downloaded, as in "this is file 1 out of 9"
 //reference2 - overall number of files to download, counting zero. so if there are ten files, it'll display as 9.
 //reference3 - what's being updated - ghost, shell, balloon, plugin, headline, baseware

 //Big thanks to Malakin for helping me figure it out.
 
 
//---- Downloading the update ------------------------------------------------
OnUpdate.OnDownloadBegin
{
	"\C"
	 --		 
	Update_Process = TOINT(reference1) + 1
	Update_Total = TOINT(reference2) + 1
	Update_Remaining = Update_Total - Update_Process

	//defining starting points
	PointA = 1 
	PointB = 1

	//defining text buffers beforehand, otherwise they don't display right
	_txt = ""
	
	//loop calculates how many check boxes to display based on the variables above, the if check is for displaying the ascii border on the sides
	while PointA <= Update_Process 
	{
		_txt += "X" 
		PointA++ 
	} 
	//see above except for blank boxes
	while PointB <= Update_Remaining 
	{
		_txt += "0" 
		PointB++ 
	}
	--
	//using the text buffers to display the correct number of boxes
	"\c[line,2]\f[align,center]\_q\n\n\n%(_txt)\_q\f[default]\n\n%(Update_Process) of %(Update_Total)"
	--
	//flavortext - i don't want to lose this, i hope there's a way i can keep all of it
		
 	if "aitalk" _in_ reference0 //this is checking to see what kind of files are being downloaded. In this case, it's looking for files called aitalk in the download queue.
	{
		"The Developer has given me new things to say. \_w[500]\e"
	}
	else //for files not specified above
	{
		""
	} 
	--
	
	"\_w[500]\e"
}

 //---- OnUpdate.OnMD5CompareBegin ---------------------------------------------------
 //This checks the hash value of the files in the directory and the files listed in updates.dau, I believe.
 
OnUpdate.OnMD5CompareBegin
{
	//"Checking the MD5 value.\e"
}

 //---- OnUpdate.OnMD5CompareComplete --------------------------------------------------
 //After they've checked the MD5 value and it matches.
 
OnUpdate.OnMD5CompareComplete
{
	//"MD5 check good.\e"
}

 //---- OnUpdate.OnMD5CompareFailure ---------------------------------------------------
 //If the MD5 values don't match, meaning if the file is missing or damaged or incomplete in some way.
 
OnUpdate.OnMD5CompareFailure
{
	_file = reference0
	"\0 The MD5 values don't match. %(_file)\_w[500]\e"
}


//---- OnUpdateComplete ------
//When the ghost has finished the update process.

OnUpdateComplete
 {
	if reference0 == "none" //if the ghost had nothing to update with
 	{
 		"%(sbot)There were no changes to be made. \_w[500]\e"
		
	}
 	else //if the ghost has updated successfully
	{
		lastUpDate = disDate
		"%(sbot)Update complete. Do you wish to view the changelog?\_w[500]"
		--
		"\n\n\f[align,left] \![*] \q[Yes,OnChangeLog,update]\n \n[-100]\f[align,right]\![*] \q[No,NoChangelog]"
 	}
}


Select.NoChangelog
{
	
		"%(sbot)OK. You can view it anytime from my Functions menu.\_w[500]\e"
}


 //---- OnUpdateFailure ------
 //Error messages if the update process fails in some way.
 
OnUpdateFailure
{
	_file = SPLITPATH(reference1)[2] + SPLITPATH(reference1)[3]
	if reference0 == "timeout" //if the connection times out
 	{
 		"Connection timed out.\_w[500]\e"
	}
 	elseif reference0 == "md5 miss" 
	{
		"MD5 hash check failed. \_w[500]\e"
 	}
	else //for other errors
 	{
		"Update failed. \nError:%(reference0).\nSource: %(_file). \_w[500]\e"
	}
}
 
 
 // **** Headlines and RSS Feeds *******
 // This section has to do with the RSS feed option in the draw menu.
 

 // ---- OnHeadlinesenseBegin ----
 // This dialogue comes up when you select something in your RSS feed as an intro, like the other On[Thing]Begin things we've seen so far.
 
OnHeadlinesenseBegin
 {
	"Selected %(reference0).\e"
 }

 //---- OnHeadlinesense.OnFind -----
 //This actually displays the feed.
 
OnHeadlinesense.OnFind
{
	//----  What page You're on
 	if reference2 == "First" || reference2 == "First and Last"
	{
 		//---- First page
		"\0\b2%(reference0):"
 	}
	elseif reference2 == "Next"
 	{
		//---- Second page
 		"\0\b2%(reference0):"
	}
 	elseif reference2 == "Last"
	{
 		//---- Last page
		"\0\b2%(reference0):"
 	}
	--
 	//---- Headlines
	"\n\n%reference3\n"
 	--
	//---- Pages
 	if reference2 == "First" || reference2 == "Next"
	{
 		//---- Bottom buttons
		"\![*] \q[Next,] - \![*] \q[Stop,Headline_Cancel]\e"
 	}
	else
 	{
		//---- Bottom buttons
 		"\![*] \q[Stop,Headline_Cancel]\e"
 	}
	
}


Select.Headline_Cancel
{
	"Cancelled.\_w[500]\e"
}

 //---- OnHeadlinesenseComplete ----
 //This is an odd function. As far as I can gather, this is if the headline information gathering was successful, but there's no new information to report. Possibly if none of the feeds have updated? I'm a little fuzzy on this one.
 
OnHeadlinesenseComplete
 {
	"DONE. %(reference0)\_w[500]\e"
	"(%(reference0)) \_w[500]\e"
 }

 //---- OnHeadlinesenseFailure ----
 //This one is more clearly for when the ghost can't get the information it needs about the RSS feed in question.
 
OnHeadlinesenseFailure
{
	"\0\s[0]%(errorMsg)\_w[500]\n[150]"	
		
	--
	if reference0 == "can't download" //if they can't download the rss feed for some reason
	{
		"Unable to download RSS feed.\_w[500]"
	}
	elseif reference0 == "can't analyze" //if they can't read the file for some reason
	{
		"Unable to read file.\_w[500]"
	}
	else //other errors
	{
		"Unknown error.\_w[500]"
	}
	--
	"\e"
}


//**** Ghost Creation and Updating ****
//These next few are related to creating updates2.dau and .nar files


 //---- OnUpdatedataCreating ----
 //This will begin the creation of the updates2.dau file.
 
OnUpdatedataCreating
 {
	"Generating update data...\_w[500]\e"
 }

 //---- OnUpdatedataCreated ------
 //After the updates2.dau file has been successfully created.
 
OnUpdatedataCreated
 {
	"Update files created.\_w[500]\e"
 }

 //---- OnNarCreating -----------
 //Along the same lines, this is when they begin creating a .nar file for your ghost.
 
OnNarCreating
 {
	"Creating Nanika Archive...\_w[500]\e"
 }

 //---- OnNarCreated ------------
 //After the nar file has been successfully created.
 
OnNarCreated
 {
	"%(reference0) created.\_w[500]\e"
 }




//****　Clock Synchronization　********
 
//**** 미카 (http://homepage2.nifty.com/ko-ki/)의 사전을 참고했습니다．감사＞こ 나무 성

// Machine translation: "I referenced the dictionary of Mika (http://homepage2.nifty.com/ko-ki/). Thank you. Namu Castle. "

// This set of functions was done based on code from the above Korean coder, I think. I'll leave their comment there untouched. 
 

// ----OnSNTPBegin -----------
// As with the others you've seen above, this is the beginning bit of dialogue for this process.
 
OnSNTPBegin
{
	"Accessing server: %(reference0)\_w[500]"
	//%(reference0) here is the site they'll be using to check your clock.
}


// ----　OnSNTPCompare-----
// Now the ghost is going to compare the current time of your computer's system to the time of the site they connected to. 
 
OnSNTPCompare
{
 	"%(sbot)Retrieved Time: %reference1[1]/%reference1[2]/%reference1[0] %reference1[3]:%reference1[4]:%reference1[5]\_w[100]\n/
	Your Time: %reference2[1]/%reference2[2]/%reference2[0] %reference2[3]:%reference2[4]:%reference2[5]\_w[100]\n/
 	\n"
	--
 	if reference3 == 0 //if your clock is already accurate.
	{
 		"Local System Time matches Server Time.\_w[500]\e"
	}
 	else //if your clock doesn't match
	{
 		"Your computer's clock does not match the server time. \nShould I correct it?\![*] \q[Yes,OnSNTPEXECUTE]\n \n[-100]\f[align,right]\![*] \q[No,OnSNTPCANCEL]"
	}
}

// ----　OnSNTPEXECUTE -----------
// After they've fixed your clock. Note the \6 tag - that's what actually changes the clock. Do not remove that tag.
 
OnSNTPEXECUTE
{
	"%(sbot)Clock corrected. \_w[500]\e"
}

// ----　OnSNTPCANCEL -----------
// If you decide not to change your clock when they tell you it doesn't match.
 
OnSNTPCANCEL
{
	"%(sbot)OK. I am sure you have your reasons. I will not change it then. \_w[500]\e"
}

// ----　OnSNTPFailure -----------
// If they can't change the clock for some reason, possibly because the site timed out but it could be anything.
 
OnSNTPFailure
{
	"%(sbot)Unable to change conputer clock. \_w[500]\e"
}


// ---- OnDisplayChange---------
// This is when you change the resolution of your monitor while your ghost is running.
 
OnDisplayChange
{
	displaybpp    = reference0
 	displaywidth  = reference1
	displayheight = reference2
}



// ---- OnScreenSaverStart ----
// This happens if your ghost is running when your screensaver starts up. I've never got this to trigger but I love this idea, and I feel like there's a way to do it I haven't figured out yet. So you can skip these for now if you want, but if I do ever get it working, I'll come back and make a note of it.
 
OnScreenSaverStart
{
	"Starting Screensaver.\_w[500]\e"
}

// ---- OnScreenSaverEnd ----
// When you wiggle your mouse and stop your screensaver.
 
OnScreenSaverEnd
{
	"Screensaver ended\_w[500]\e"
}




// ---- OnBatteryLow ----------
// This is for when your laptop's battery is low.
 
OnBatteryLow
{
	"%(sbot)Your computer's battery level is low.\_w[500]\e"
}
 
// ----OnBatteryCritical----------
// Likewise, this is for if your battery is REALLY low.
 
OnBatteryCritical
{
	"%(sbot)Your computer's battery lever is critically low.\e"
}
 
 
// ---- OnShellScaling
// If you right click the ghost, you can go to Shell Scaling, which lists a number of different percentages. Those are the percentages your ghost can be scaled in size up or down.
 
OnShellScaling
{
	if reference0 > 100 //this number is the percentage that you're scaling the ghost up to. In this case, it's 150%.
	{
		"Shell scaled to %(reference0)%\e"
	}
	elseif reference0 == 100
	{
		"Shell scaled to its original size."
	}
	else
	{
		"Shell scaled to %(reference0)%\e"
	}
}




//---- SHIORI Information -----------
// On_version
// {
	// GETSETTING(AYAINFO_VERSION)
// }

// On_craftman
// {
	// "umeici"
// }

// On_craftmanw
// {
	// "梅市"
// }

// On_name
// {
	// "AYA"
// }